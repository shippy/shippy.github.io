---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Disqus from "./jsx-components/Disqus";
import SectionTitle from "@/components/_shared/SectionTitle.astro";
import Breadcrumbs from "@/components/_shared/Breadcrumbs.astro";
import Badge from "@/components/_shared/Badge.astro";
import Cta from "@/components/_partials/Cta.astro";
import SimilarPosts from "@/components/blog/SimilarPosts.astro";
import TableOfContentsHeading from "@/components/TableOfContentsHeading.astro";
import dateFormat from "@/lib/utils/dateFormat";
import readingTime from "@/lib/utils/readingTime";
import { formatCollection } from "@/lib/utils/formatCollection";
import placeholder from "@/assets/placeholder.jpg";
import { buildToc } from "@/lib/utils/buildToc";

const { post } = Astro.props;

const allPosts = await getCollection("blog");
const similarPosts = formatCollection(allPosts, { sortByDate: true })
  .filter((p) => {
    return (
      p.slug !== post.slug &&
      p.data.categories.includes(post.data.categories[0])
    );
  })
  .slice(0, 2);

const { Content, headings } = await post.render();
const { title, image, date, categories } = post.data;

const toc = buildToc(headings);
---

<section class="py-10">
  <div class="container">
    <div class="row justify-center">
      <div class="col-12 lg:col-12 xl:col-11">
        <Image
          alt={title}
          src={image ?? placeholder}
          width={1126}
          height={661}
          class="w-full max-w-full rounded-3xl"
        />
      </div>
      <div
        class="content-container relative flex flex-col-reverse gap-8 pt-10 lg:col-12 xl:col-11 lg:flex-row lg:items-start lg:gap-16 lg:pt-20"
      >
        <div class="lg:w-3/4">
          <div class="mb-12 lg:block">
            <h1 class="lg:block">
              {title}
            </h1>
            <div class="my-6 flex items-center">
              <span>{dateFormat(date)} - {readingTime(post.body)}</span>
            </div>
            <ul class="flex flex-wrap items-center gap-4">
              {
                categories.map((category: string) => (
                  <li>
                    <Badge text={category} />
                  </li>
                ))
              }
            </ul>
          </div>
          <div class="content post">
            <Content />
          </div>
        </div>

        <!-- Table of Content -->
        {
          toc.length > 0 && (
            <nav class="toc sticky hidden text-primary lg:top-24 lg:block lg:w-1/4">
              <ul class="grid gap-3 pl-3">
                {toc.map((heading) => (
                  <TableOfContentsHeading heading={heading} />
                ))}
              </ul>
              <svg class="toc-progress" xmlns="http://www.w3.org/2000/svg">
                <path
                  class="toc-marker"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-dasharray="1 0 0 1000"
                  stroke-dashoffset="1"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </nav>
          )
        }
      </div>
    </div>
  </div>
  <section class="section">
    <div class="container">
      {
        similarPosts.length > 0 && (
          <div>
            <SectionTitle data={{ title: "Related Articles" }} />
            <SimilarPosts posts={similarPosts} />
          </div>
        )
      }
    </div>
  </section>
  <Cta />

  <script>
    document.addEventListener(
      "astro:page-load",
      () => {
        const header = document.querySelector("header") as HTMLElement;
        const tocLinks = document.querySelectorAll(".toc-link");
        const contentContainer = document.querySelector(
          ".content-container"
        ) as HTMLElement;
        const contentH1s = document.querySelectorAll(".content h1");
        const contentH2s = document.querySelectorAll(".content h2");
        const contentH3s = document.querySelectorAll(".content h3");
        const contentH4s = document.querySelectorAll(".content h4");
        const contentH5s = document.querySelectorAll(".content h5");
        const contentH6s = document.querySelectorAll(".content h6");

        const allContentHeadings = [
          ...contentH1s,
          ...contentH2s,
          ...contentH3s,
          ...contentH4s,
          ...contentH5s,
          ...contentH6s,
        ];

        // ScrollTo Implementation
        tocLinks.forEach((link) => {
          link.addEventListener("click", (e: any) => {
            e.preventDefault();
            // prevent default

            // navigate to specific spot
            const id = e.currentTarget.getAttribute("href").slice(1);
            const element = document.getElementById(id) as HTMLElement;
            const headerHeight = header.getBoundingClientRect().height;
            let position =
              element.offsetTop +
              contentContainer.offsetTop -
              headerHeight * 1.5;

            window.history.pushState(window.location.pathname, "", `#${id}`);
            window.scrollTo({
              left: 0,
              top: position,
            });
          });
        });

        // Linkable Headings Implementation
        allContentHeadings.forEach((heading: any) => {
          heading.addEventListener("click", (e: any) => {
            // navigate to specific spot
            const headerHeight = header.getBoundingClientRect().height;
            const id = e.currentTarget.getAttribute("id");
            let position =
              heading.offsetTop +
              contentContainer.offsetTop -
              headerHeight * 1.5;

            window.history.pushState(window.location.pathname, "", `#${id}`);
            window.scrollTo({
              left: 0,
              top: position,
            });
          });
        });
      },
      { once: false }
    );

    document.addEventListener(
      "astro:page-load",
      () => {
        // Create some WeakMaps to store the distances to the top and
        // bottom of each link
        const linkStarts = new WeakMap();
        const linkEnds = new WeakMap();

        addIntersectionObserver();
        addResizeObserver();

        function addIntersectionObserver() {
          const observer = new IntersectionObserver((headings) => {
            headings.forEach((heading) => {
              const id = heading.target.getAttribute("id");

              // Get the link to this section's heading
              const link = document.querySelector(
                `nav.toc li a[href="#${id}"]`
              );

              if (!link) return;

              // Add/remove the .active class based on whether the
              // heading is visible

              const addRemove =
                heading.intersectionRatio > 0 ? "add" : "remove";
              link.classList[addRemove]("active");
            });
            updatePath();
          });

          // Observe all the sections of the article
          document
            .querySelectorAll(".post h2,.post h3,.post h4,.post h5,.post h6")
            .forEach((headings) => {
              observer.observe(headings);
            });
        }

        function addResizeObserver() {
          if (!document.querySelector("nav.toc")) return;
          const observer = new ResizeObserver(() => {
            drawPath();
            updatePath();
          });
          observer.observe(document.querySelector("nav.toc") as HTMLElement);
        }

        function drawPath() {
          const path = document.querySelector(
            "path.toc-marker"
          ) as SVGPathElement;
          const links = Array.from(document.querySelectorAll("nav.toc a"));
          if (!links.length) return;

          // Start with an empty array of path data values (joined with
          // spaces later)
          let pathData = [];
          let left = 0; // The last x position / indentation

          // Iterate over each link to build up the pathData
          links.forEach((link: any, i) => {
            const x = link.offsetLeft;
            const y = link.offsetTop;
            const height = link.offsetHeight;
            if (i === 0) {
              // The top of the first link starts at 0px along the path.
              linkStarts.set(link, 0);
              // Like drawing with a pen...
              // 'M'ove to the top left of the first link,
              // and then draw a 'L'ine to the bottom left
              pathData.push("M", x, y, "L", x, y + height);
            } else {
              // If the current link is indented differently than the last,
              // then come down to the current link's top before moving
              // left or right. This ensures we get 90-degrees angle at the
              // corners.
              if (left !== x) pathData.push("L", left, y);

              // Draw a line to the top left of the current link
              pathData.push("L", x, y);

              // Apply the current path data to the path element
              path.setAttribute("d", pathData.join(" "));

              // Get the total length of the path now that it extends
              // to the top of this link, and store it in our linkStarts
              // WeakMap.
              linkStarts.set(link, path.getTotalLength());

              // Draw a line to the bottom left of the current link
              pathData.push("L", x, y + height);
            }

            // Save the current link's x position to compare with the next
            // link
            left = x;

            // Apply the current path data to the path element again
            path.setAttribute("d", pathData.join(" "));

            // Get the length of the path that now extends to the
            // bottom of this link, and store it in our linkEnds WeakMap.
            linkEnds.set(link, path.getTotalLength());
          });
        }

        function updatePath() {
          const path = document.querySelector(
            "path.toc-marker"
          ) as SVGPathElement;
          const pathLength = path.getTotalLength();
          const activeLinks = document.querySelectorAll("nav.toc a.active");
          let linkStart = pathLength;
          let linkEnd = 0;
          activeLinks.forEach((link) => {
            // Set linkStart to the top of the earliest active link
            linkStart = Math.min(linkStart, linkStarts.get(link));
            // Set linkEnd to the bottom of the furthest active link
            linkEnd = Math.max(linkEnd, linkEnds.get(link));
          });
          // If there are no active links, hide the path
          path.style.display = activeLinks.length ? "inline" : "none";
          // FINALLY, do the thing!
          path.setAttribute(
            "stroke-dasharray",
            `1 ${linkStart} ${linkEnd - linkStart} ${pathLength}`
          );
        }
      },
      { once: false }
    );
  </script>

  <style>
    .content {
      h2,
      h3,
      h4,
      h5,
      h6 {
        @apply relative inline-block cursor-pointer transition-all before:absolute before:left-[105%] before:text-primary/60 before:opacity-0 before:transition-all before:content-['#'] hover:text-primary hover:before:opacity-70 lg:block lg:before:-left-10;
      }
    }

    .content p {
      @apply !text-[15px];
    }

    .toc-progress {
      pointer-events: none;
      position: absolute;
      top: 0;
      left: -10px;
      width: 100%;
      height: 100%;
    }

    path.toc-marker {
      transition: stroke-dasharray 0.3s ease;
    }

    a:not(.active) {
      color: #899;
    }
  </style>
</section>
