---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Disqus from "./jsx-components/Disqus";
import SectionTitle from "@/components/_shared/SectionTitle.astro";
import Breadcrumbs from "@/components/_shared/Breadcrumbs.astro";
import Badge from "@/components/_shared/Badge.astro";
import Cta from "@/components/_partials/Cta.astro";
import SimilarPosts from "@/components/blog/SimilarPosts.astro";
import dateFormat from "@/lib/utils/dateFormat";
import readingTime from "@/lib/utils/readingTime";
import { formatCollection } from "@/lib/utils/formatCollection";
import placeholder from "@/assets/placeholder.jpg";

const { post } = Astro.props;

const allPosts = await getCollection("blog");
const similarPosts = formatCollection(allPosts, { sortByDate: true })
  .filter((p) => {
    return (
      p.slug !== post.slug &&
      p.data.categories.includes(post.data.categories[0])
    );
  })
  .slice(0, 2);

const { Content, headings } = await post.render();
const { title, image, date, categories } = post.data;

console.log(headings);
---

<section class="py-10">
  <div class="container">
    <div class="row justify-center">
      <div class="col-12 lg:col-12 xl:col-11">
        <Image
          alt={title}
          src={image ?? placeholder}
          width={1126}
          height={661}
          class="w-full max-w-full rounded-3xl"
        />
      </div>
      <div
        class="content-container relative flex flex-col-reverse gap-8 pt-10 lg:col-12 xl:col-11 lg:flex-row lg:items-start lg:gap-16 lg:pt-20"
      >
        <div class="lg:w-3/4">
          <div class="mb-12 hidden lg:block">
            <h1 class="lg:block">
              {title}
            </h1>
            <div class="my-6 flex items-center">
              <span>{dateFormat(date)} - {readingTime(post.body)}</span>
            </div>
            <ul class="flex flex-wrap items-center gap-4">
              {
                categories.map((category: string) => (
                  <li>
                    <Badge text={category} />
                  </li>
                ))
              }
            </ul>
          </div>
          <div class="content">
            <Content />
          </div>
        </div>

        <!-- Table of Content -->
        {
          headings.length > 0 && (
            <div class="lg:sticky lg:top-24 lg:mt-4 lg:w-1/4">
              <div class="mb-12 lg:hidden">
                <h1 class="lg:block">{title}</h1>
                <div class="my-6 flex items-center">
                  <span>
                    {dateFormat(date)} - {readingTime(post.body)}
                  </span>
                </div>
                <ul class="flex flex-wrap items-center gap-4">
                  {categories.map((category: string) => (
                    <li>
                      <Badge text={category} />
                    </li>
                  ))}
                </ul>
              </div>
              <div class="rounded-md bg-primary/5 px-6 py-8 lg:bg-transparent lg:p-0">
                <h4 class="mb-6 pl-4">Table of Contents</h4>
                <ul class="toc-items flex flex-col gap-4">
                  {headings.map((link: any) => (
                    <li
                      class={link.slug}
                      style={{
                        paddingLeft:
                          link.depth > 2 ? `${link.depth * 7}px` : "",
                      }}
                    >
                      <a
                        href={`#${link.slug}`}
                        class="toc-link inline-block border-l-2 border-transparent  pl-4 text-sm leading-snug transition-colors hover:text-primary lg:text-base"
                      >
                        {link.text}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
<section class="section">
  <div class="container">
    {
      similarPosts.length > 0 && (
        <div>
          <SectionTitle data={{ title: "Related Articles" }} />
          <SimilarPosts posts={similarPosts} />
        </div>
      )
    }
  </div>
</section>
<Cta />

<script>
  import gsap from "gsap";

  document.addEventListener(
    "astro:page-load",
    () => {
      const header = document.querySelector("header") as HTMLElement;
      const tocLinks = document.querySelectorAll(".toc-link");
      const contentContainer = document.querySelector(
        ".content-container"
      ) as HTMLElement;
      const contentH1s = document.querySelectorAll(".content h1");
      const contentH2s = document.querySelectorAll(".content h2");
      const contentH3s = document.querySelectorAll(".content h3");
      const contentH4s = document.querySelectorAll(".content h4");
      const contentH5s = document.querySelectorAll(".content h5");
      const contentH6s = document.querySelectorAll(".content h6");

      const allContentHeadings = [
        ...contentH1s,
        ...contentH2s,
        ...contentH3s,
        ...contentH4s,
        ...contentH5s,
        ...contentH6s,
      ];

      // ScrollTo Implementation
      tocLinks.forEach((link) => {
        link.addEventListener("click", (e: any) => {
          e.preventDefault();
          // prevent default

          // navigate to specific spot
          const id = e.currentTarget.getAttribute("href").slice(1);
          const element = document.getElementById(id) as HTMLElement;
          const headerHeight = header.getBoundingClientRect().height;
          let position =
            element.offsetTop + contentContainer.offsetTop - headerHeight * 1.5;

          window.history.pushState(window.location.pathname, "", `#${id}`);
          window.scrollTo({
            left: 0,
            top: position,
          });
        });
      });

      // Linkable Headings Implementation
      allContentHeadings.forEach((heading: any) => {
        heading.addEventListener("click", (e: any) => {
          // navigate to specific spot
          const headerHeight = header.getBoundingClientRect().height;
          const id = e.currentTarget.getAttribute("id");
          let position =
            heading.offsetTop + contentContainer.offsetTop - headerHeight * 1.5;

          window.history.pushState(window.location.pathname, "", `#${id}`);
          window.scrollTo({
            left: 0,
            top: position,
          });
        });
      });

      allContentHeadings.forEach((heading: any) => {
        const linkClass = `.toc-items .${heading.getAttribute("id")} .toc-link`;
        gsap.to(linkClass, {
          ease: "power2.inOut",
          borderLeftColor: "#fe6019",
          color: "#fe6019",
          scrollTrigger: {
            trigger: heading,
            start: "bottom 95%",
            end: "bottom 5%",
            toggleActions: "play reverse play reverse",
          },
        });
      });
    },
    { once: false }
  );
</script>

<style>
  .content {
    h2,
    h3,
    h4,
    h5,
    h6 {
      @apply relative cursor-pointer transition-all before:absolute before:-left-10 before:text-primary/60 before:opacity-0 before:transition-all before:content-['#'] hover:text-primary hover:before:opacity-70;
    }
  }
</style>
